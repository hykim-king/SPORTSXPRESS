<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">
	
	<!-- Root Context: defines shared resources visible to all other web components -->
	<!-- 트랜잭션 advice 설정은 advice가 직접 구현하였다. 하지만 트랜잭션 관리 기능의 advice는 직접 구현x Spring 
	-->
	<!-- mybatis설정 -->
	<!-- mybatis db연결 객체 -->
	<bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
	<!--sqlSesstionFactoryBean: mybatis설정 파일 read -->
	   <constructor-arg index="0" ref="sqlSessionFactoryBean"></constructor-arg>
	</bean>
	
	<bean id ="sqlSessionFactoryBean" class="org.mybatis.spring.SqlSessionFactoryBean">
	   <property name="dataSource" ref="dataSource"/>
	   <property name="configLocation" value="classpath:mybatis-config.xml"/>
	   <property name="mapperLocations" value="classpath:mapper/**/*.xml"/>
	</bean>
   <!-- tx:advice를 참조하여 자동 생성 
   --> 
  
  <tx:advice id="txAdvice"
    transaction-manager="transactionManager">
    <tx:attributes>
      <!-- do*로 시작하는 메소드는 트랜잭션 관리 대상에서 제외 -->
      <tx:method name="do*" read-only="true" />

      <!-- up*로 시작하는 메소드는 트랜잭션 관리 대상 -->
      <tx:method name="up*" read-only="false"
        rollback-for="Exception" />
    </tx:attributes>
  </tx:advice>

  <!-- adviser : pointcut + advice * com.pcwk.ehr.업무구분.*Impl.up*(..) com.pcwk.ehr.user.service -->
  <aop:config>
    <aop:pointcut
      expression="execution(* com.pcwk.ehr..service.*Impl.up*(..))"
      id="txPointCut" />
    <aop:advisor advice-ref="txAdvice"
      pointcut-ref="txPointCut" />
  </aop:config>

  <bean id="jdbcTemplate"
    class="org.springframework.jdbc.core.JdbcTemplate">
    <property name="dataSource" ref="dataSource"></property>
  </bean>

  <!-- Advice 부가기능:logging -->
<!--   <bean id="aroundAdvice"
    class="com.pcwk.ehr.aspect.PerformanceAroundAdvice"></bean> -->


  <!-- 개발용 DummyMailSender -->
<!--   <bean id="dummyMailSender"
    class="com.pcwk.ehr.user.service.DummyMailSender"></bean> -->

  <!-- JavaMailSenderImpl -->
  <bean id="mailSenderImpl"
    class="org.springframework.mail.javamail.JavaMailSenderImpl">
    <property name="host" value="smtp.naver.com" />
    <property name="port" value="465" />
    <property name="username" value="kjbv0070@naver.com" />
    <property name="password" value="R1GQKPBCD1VD" />
    <property name="defaultEncoding" value="utf-8" />
    <property name="javaMailProperties">
      <props>
        <prop key="mail.smtp.host">smtp.naver.com</prop>
        <prop key="mail.smtp.port">465</prop>
        <prop key="mail.smtp.auth">true</prop>
        <prop key="mail.smtp.ssl.protocols">TLSv1.2</prop>
        <prop key="mail.smtp.ssl.enable">true</prop>
        <prop key="mail.smtp.ssl.trust">smtp.naver.com</prop>
        <prop key="mail.debug">true</prop>
      </props>
    </property>
  </bean>

  <!-- JDBC DataSourceTransactionManager 트랜잭션 -->
  <bean id="transactionManager"
    class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
    <property name="dataSource" ref="dataSource" />
  </bean>


  <context:property-placeholder
    location="classpath:/resource/config/database.properties"></context:property-placeholder>
  <!-- Connection Pool -->
  <bean id="dataSource"
    class="org.apache.commons.dbcp.BasicDataSource">
    <property name="driverClassName" value="${jdbc.driver}" />
    <property name="url" value="${jdbc.url}" />
    <property name="username" value="${jdbc.username}" />
    <property name="password" value="${jdbc.password}" />

    <!-- 최대 접속 허용 개수 -->
    <property name="maxActive" value="${jdbc.maxActive}" />

    <!-- 여분으로 남겨진 Connection -->
    <property name="maxIdle" value="5" />

    <!-- DB연결 대기 시간 -->
    <property name="maxWait" value="50000" />

    <!-- 버려진 연결로 인식할 기본 시간 -->
    <property name="removeAbandonedTimeout" value="60" />
  </bean>


  
</beans>